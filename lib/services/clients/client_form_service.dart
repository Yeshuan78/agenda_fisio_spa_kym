// [client_form_service.dart] - SERVICIO ESPECIALIZADO PARA FORMULARIO DE CLIENTE - ‚úÖ FIX M√âTRICAS EN 0
// üìÅ Ubicaci√≥n: /lib/services/clients/client_form_service.dart
// üéØ OBJETIVO: Operaciones CRUD especializadas con control de costos + M√âTRICAS EN 0
// ‚úÖ FIX CR√çTICO: M√©tricas inicializadas en 0 para clientes nuevos

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:agenda_fisio_spa_kym/models/clients/client_form_model.dart';
import 'package:agenda_fisio_spa_kym/models/clients/client_model.dart';
import 'package:agenda_fisio_spa_kym/models/company/company_settings_model.dart';
import 'package:agenda_fisio_spa_kym/screens/clients/services/client_service.dart';
import 'package:agenda_fisio_spa_kym/services/cost_control/background_cost_monitor.dart';
import 'package:agenda_fisio_spa_kym/services/cost_control/cost_data_models.dart';

/// üõ†Ô∏è EXCEPCIONES ESPEC√çFICAS DEL FORMULARIO
class ClientFormException implements Exception {
  final String message;
  final String code;
  final Map<String, dynamic>? details;

  const ClientFormException(this.message, this.code, [this.details]);

  @override
  String toString() => 'ClientFormException($code): $message';
}

class DuplicateEmailException extends ClientFormException {
  DuplicateEmailException(String email)
      : super('El email $email ya est√° registrado', 'DUPLICATE_EMAIL');
}

class CostLimitException extends ClientFormException {
  CostLimitException()
      : super('L√≠mite de costos alcanzado', 'COST_LIMIT_EXCEEDED');
}

class ValidationException extends ClientFormException {
  final String field;

  ValidationException(this.field, String message)
      : super(message, 'VALIDATION_ERROR', {'field': field});
}

/// üèóÔ∏è SERVICIO PRINCIPAL PARA OPERACIONES DE FORMULARIO
class ClientFormService {
  static final _instance = ClientFormService._internal();
  factory ClientFormService() => _instance;
  ClientFormService._internal();

  // ‚úÖ DEPENDENCIAS
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final BackgroundCostMonitor _costMonitor = BackgroundCostMonitor();

  // ‚úÖ CONFIGURACI√ìN
  static const String _collectionName = 'clients';
  static const Duration _operationTimeout = Duration(seconds: 30);

  // ========================================================================
  // üöÄ M√âTODOS P√öBLICOS PRINCIPALES
  // ========================================================================

  /// ‚ûï CREAR NUEVO CLIENTE - ‚úÖ CON SERVICEMODE Y M√âTRICAS EN 0
  Future<ClientModel> createClient(ClientFormModel formData) async {
    debugPrint('‚ûï Creando nuevo cliente: ${formData.personalInfo.fullName}');
    debugPrint('üéØ Con serviceMode: ${formData.serviceMode.label}');

    // 1Ô∏è‚É£ Verificar l√≠mites de costo
    _checkCostLimits();

    // 2Ô∏è‚É£ Validar datos del formulario
    await _validateFormData(formData, isUpdate: false);

    // 3Ô∏è‚É£ Verificar email √∫nico
    final emailIsUnique = await isEmailUnique(formData.personalInfo.email);
    if (!emailIsUnique) {
      throw DuplicateEmailException(formData.personalInfo.email);
    }

    try {
      // 4Ô∏è‚É£ Preparar datos para Firestore - ‚úÖ CON SERVICEMODE Y M√âTRICAS EN 0
      final clientData = _prepareClientData(formData);

      // ‚úÖ LOG CR√çTICO ANTES DE GUARDAR EN FIRESTORE
      debugPrint('üíæ Datos que se guardar√°n en Firestore:');
      debugPrint('   serviceMode: ${clientData['serviceMode']}');
      debugPrint('   isHomeService: ${clientData['isHomeService']}');
      debugPrint('   appointmentsCount: ${clientData['appointmentsCount']}');
      debugPrint('   totalRevenue: ${clientData['totalRevenue']}');

      // 5Ô∏è‚É£ Crear documento en Firestore
      final docRef = await _firestore
          .collection(_collectionName)
          .add(clientData)
          .timeout(_operationTimeout);

      // 6Ô∏è‚É£ Registrar consulta para costos
      _recordRead();

      // 7Ô∏è‚É£ Obtener cliente creado con ID
      final doc = await docRef.get();
      final createdClient = ClientModel.fromDoc(doc);

      // 8Ô∏è‚É£ Log de auditor√≠a
      await _logClientOperation(
          'CREATE', createdClient.clientId, formData.personalInfo.fullName);

      debugPrint('‚úÖ Cliente creado exitosamente: ${createdClient.clientId}');
      debugPrint('‚úÖ Con serviceMode guardado: ${formData.serviceMode.label}');
      debugPrint('‚úÖ Con m√©tricas inicializadas en 0');
      return createdClient;
    } catch (e) {
      debugPrint('‚ùå Error creando cliente: $e');
      _handleFirestoreError(e);
      rethrow;
    }
  }

  /// ‚úèÔ∏è ACTUALIZAR CLIENTE EXISTENTE - ‚úÖ CON SERVICEMODE
  Future<ClientModel> updateClient(ClientFormModel formData) async {
    if (formData.clientId == null) {
      throw const ClientFormException(
          'ID de cliente requerido para actualizaci√≥n', 'MISSING_CLIENT_ID');
    }

    debugPrint('‚úèÔ∏è Actualizando cliente: ${formData.clientId}');
    debugPrint('üéØ Con serviceMode: ${formData.serviceMode.label}');

    // 1Ô∏è‚É£ Verificar l√≠mites de costo
    _checkCostLimits();

    // 2Ô∏è‚É£ Validar datos del formulario
    await _validateFormData(formData, isUpdate: true);

    // 3Ô∏è‚É£ Verificar que el cliente existe
    final existingClient = await _getExistingClient(formData.clientId!);

    // 4Ô∏è‚É£ Verificar email √∫nico (solo si cambi√≥)
    if (existingClient.email != formData.personalInfo.email) {
      final emailIsUnique = await isEmailUnique(formData.personalInfo.email);
      if (!emailIsUnique) {
        throw DuplicateEmailException(formData.personalInfo.email);
      }
    }

    try {
      // 5Ô∏è‚É£ Preparar datos actualizados - ‚úÖ CON SERVICEMODE
      final updatedData = _prepareClientData(formData);
      updatedData['updatedAt'] = FieldValue.serverTimestamp();

      // ‚úÖ LOG CR√çTICO ANTES DE ACTUALIZAR EN FIRESTORE
      debugPrint('üíæ Datos que se actualizar√°n en Firestore:');
      debugPrint('   serviceMode: ${updatedData['serviceMode']}');
      debugPrint('   isHomeService: ${updatedData['isHomeService']}');

      // 6Ô∏è‚É£ Actualizar documento en Firestore
      await _firestore
          .collection(_collectionName)
          .doc(formData.clientId)
          .update(updatedData)
          .timeout(_operationTimeout);

      // 7Ô∏è‚É£ Registrar consulta para costos
      _recordRead();

      // 8Ô∏è‚É£ Obtener cliente actualizado
      final doc = await _firestore
          .collection(_collectionName)
          .doc(formData.clientId)
          .get();

      final updatedClient = ClientModel.fromDoc(doc);

      // 9Ô∏è‚É£ Log de auditor√≠a
      await _logClientOperation(
          'UPDATE', updatedClient.clientId, formData.personalInfo.fullName);

      debugPrint(
          '‚úÖ Cliente actualizado exitosamente: ${updatedClient.clientId}');
      debugPrint('‚úÖ Con serviceMode guardado: ${formData.serviceMode.label}');
      return updatedClient;
    } catch (e) {
      debugPrint('‚ùå Error actualizando cliente: $e');
      _handleFirestoreError(e);
      rethrow;
    }
  }

  /// üîç VERIFICAR SI EMAIL ES √öNICO
  Future<bool> isEmailUnique(String email) async {
    if (email.trim().isEmpty) return false;

    debugPrint('üîç Verificando email √∫nico: $email');

    try {
      // Verificar l√≠mites de costo antes de consulta
      if (!_canPerformRead()) {
        debugPrint('‚ö†Ô∏è L√≠mite de costos alcanzado para verificaci√≥n de email');
        return true; // Permitir continuar si no podemos verificar
      }

      final query = await _firestore
          .collection(_collectionName)
          .where('correo', isEqualTo: email.trim().toLowerCase())
          .limit(1)
          .get()
          .timeout(_operationTimeout);

      // Registrar consulta para costos
      _recordRead();

      final emailIsUnique = query.docs.isEmpty;
      debugPrint('üìä Email √∫nico: $emailIsUnique');

      return emailIsUnique;
    } catch (e) {
      debugPrint('‚ùå Error verificando email √∫nico: $e');
      // En caso de error, permitir continuar (fail-safe)
      return true;
    }
  }

  /// üóëÔ∏è ELIMINAR CLIENTE (SOFT DELETE)
  Future<void> deleteClient(String clientId) async {
    debugPrint('üóëÔ∏è Eliminando cliente: $clientId');

    // 1Ô∏è‚É£ Verificar l√≠mites de costo
    _checkCostLimits();

    try {
      // 2Ô∏è‚É£ Marcar como eliminado (soft delete)
      await _firestore.collection(_collectionName).doc(clientId).update({
        'isActive': false,
        'deletedAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      }).timeout(_operationTimeout);

      // 3Ô∏è‚É£ Registrar consulta para costos
      _recordRead();

      // 4Ô∏è‚É£ Log de auditor√≠a
      await _logClientOperation('DELETE', clientId, 'Cliente eliminado');

      debugPrint('‚úÖ Cliente eliminado exitosamente: $clientId');
    } catch (e) {
      debugPrint('‚ùå Error eliminando cliente: $e');
      _handleFirestoreError(e);
      rethrow;
    }
  }

  /// üìã OBTENER CLIENTE POR ID
  Future<ClientModel?> getClientById(String clientId) async {
    debugPrint('üìã Obteniendo cliente: $clientId');

    try {
      // Verificar l√≠mites de costo
      if (!_canPerformRead()) {
        throw CostLimitException();
      }

      final doc = await _firestore
          .collection(_collectionName)
          .doc(clientId)
          .get()
          .timeout(_operationTimeout);

      // Registrar consulta para costos
      _recordRead();

      if (!doc.exists) {
        debugPrint('‚ùå Cliente no encontrado: $clientId');
        return null;
      }

      final client = ClientModel.fromDoc(doc);
      debugPrint('‚úÖ Cliente obtenido: ${client.fullName}');

      return client;
    } catch (e) {
      debugPrint('‚ùå Error obteniendo cliente: $e');
      _handleFirestoreError(e);
      rethrow;
    }
  }

  // ========================================================================
  // üîß M√âTODOS PRIVADOS DE VALIDACI√ìN
  // ========================================================================

  Future<void> _validateFormData(ClientFormModel formData,
      {required bool isUpdate}) async {
    debugPrint('üîç Validando datos del formulario...');

    final List<String> errors = [];

    // Validar informaci√≥n personal
    if (formData.personalInfo.nombre.trim().isEmpty) {
      errors.add('Nombre es requerido');
    }
    if (formData.personalInfo.apellidos.trim().isEmpty) {
      errors.add('Apellidos son requeridos');
    }
    if (!_isValidEmail(formData.personalInfo.email)) {
      errors.add('Email no v√°lido');
    }

    // ‚úÖ FIX QUIR√öRGICO: Validar tel√©fono internacional REAL
    if (!_isValidInternationalPhoneFixed(formData.personalInfo.telefono)) {
      errors.add('Tel√©fono no v√°lido');
    }

    // ‚úÖ FIX QUIR√öRGICO: DIRECCI√ìN 100% OPCIONAL - SIN VALIDACIONES
    // Eliminamos TODAS las validaciones de direcci√≥n
    // Solo validar CP si est√° presente Y no est√° vac√≠o
    if (formData.addressInfo.codigoPostal.trim().isNotEmpty &&
        !_isValidCP(formData.addressInfo.codigoPostal)) {
      errors.add('C√≥digo postal no v√°lido (si se proporciona)');
    }

    // Validar ID para actualizaciones
    if (isUpdate && formData.clientId == null) {
      errors.add('ID de cliente requerido para actualizaci√≥n');
    }

    if (errors.isNotEmpty) {
      throw ValidationException('general', errors.join(', '));
    }

    debugPrint('‚úÖ Validaci√≥n completada exitosamente');
  }

  Future<ClientModel> _getExistingClient(String clientId) async {
    final client = await getClientById(clientId);
    if (client == null) {
      throw const ClientFormException(
          'Cliente no encontrado', 'CLIENT_NOT_FOUND');
    }
    return client;
  }

  /// ‚úÖ FIX CR√çTICO: PREPARAR DATOS CON SERVICEMODE + M√âTRICAS EN 0 + FECHA DE NACIMIENTO
  Map<String, dynamic> _prepareClientData(ClientFormModel formData) {
    final Map<String, dynamic> data = {
      // ‚úÖ CAMPOS COMPATIBLES CON ESTRUCTURA EXISTENTE
      'nombre': formData.personalInfo.nombre.trim(),
      'apellidos': formData.personalInfo.apellidos.trim(),
      'correo': formData.personalInfo.email.trim().toLowerCase(),
      'telefono':
          _formatInternationalPhoneFixed(formData.personalInfo.telefono),
      'empresa': formData.personalInfo.empresa?.trim(),

      // ‚úÖ FIX CR√çTICO #1: AGREGAR FECHA DE NACIMIENTO
      'fechaNacimiento': formData.personalInfo.fechaNacimiento != null
          ? Timestamp.fromDate(formData.personalInfo.fechaNacimiento!)
          : null,

      // ‚úÖ FIX CR√çTICO #2: CAMPOS ADICIONALES PARA QUERIES DE CUMPLEA√ëOS
      'edad': formData.personalInfo.fechaNacimiento != null
          ? _calculateAge(formData.personalInfo.fechaNacimiento!)
          : null,
      'mesNacimiento': formData.personalInfo.fechaNacimiento?.month,
      'diaNacimiento': formData.personalInfo.fechaNacimiento?.day,

      // ‚úÖ DIRECCI√ìN - TODOS LOS CAMPOS OPCIONALES
      'calle': formData.addressInfo.calle.trim(),
      'numeroExterior': formData.addressInfo.numeroExterior.trim(),
      'numeroInterior': formData.addressInfo.numeroInterior?.trim(),
      'colonia': formData.addressInfo.colonia.trim(),
      'codigoPostal': _formatCP(formData.addressInfo.codigoPostal),
      'alcaldia': formData.addressInfo.alcaldia.trim(),

      // ‚úÖ ETIQUETAS EN FORMATO COMPATIBLE
      'tiposCliente': _prepareTagsData(formData.tagsInfo),

      // ‚úÖ FIX CR√çTICO: CAMPOS DE MODO DE SERVICIO CORREGIDOS
      'serviceMode': formData.serviceMode.name, // ‚úÖ CAMPO PRINCIPAL
      'isHomeService': formData.isHomeService, // ‚úÖ CAMPO DERIVADO
      'isInSiteService': formData.isInSiteService, // ‚úÖ CAMPO DERIVADO
      'isHybridService': formData.isHybridService, // ‚úÖ CAMPO DERIVADO NUEVO

      // ‚úÖ METADATOS
      'isActive': true,
      'source': 'form_crud',
      'status': 'active',
    };

    // ‚úÖ FIX CR√çTICO: INICIALIZAR M√âTRICAS EN 0 SOLO PARA CLIENTES NUEVOS
    if (!formData.isEditing) {
      // Cliente nuevo - inicializar m√©tricas en 0
      data.addAll({
        // ‚úÖ M√âTRICAS EN ROOT LEVEL (COMPATIBILIDAD)
        'appointmentsCount': 0,
        'attendedAppointments': 0,
        'cancelledAppointments': 0,
        'noShowAppointments': 0,
        'totalRevenue': 0.0,
        'averageTicket': 0.0,
        'satisfactionScore': 0.0,
        'loyaltyPoints': 0,
        'lastAppointment': null,
        'nextAppointment': null,

        // ‚úÖ M√âTRICAS COMO OBJETO ANIDADO (FLEXIBILIDAD)
        'metrics': {
          'appointmentsCount': 0,
          'attendedAppointments': 0,
          'cancelledAppointments': 0,
          'noShowAppointments': 0,
          'totalRevenue': 0.0,
          'averageTicket': 0.0,
          'satisfactionScore': 0.0,
          'loyaltyPoints': 0,
          'lastAppointment': null,
          'nextAppointment': null,
        },

        'createdAt': FieldValue.serverTimestamp(),
      });

      debugPrint('üì§ Cliente NUEVO: M√©tricas inicializadas en 0 ‚úÖ');
    } else {
      // Cliente existente - NO tocar m√©tricas existentes
      debugPrint('üì§ Cliente EXISTENTE: M√©tricas preservadas ‚úÖ');
    }

    // Remover campos null o vac√≠os EXCEPTO m√©tricas en 0 y fechaNacimiento
    data.removeWhere((key, value) =>
        value == null ||
        (value == '' &&
            ![
              'serviceMode',
              'appointmentsCount',
              'totalRevenue',
              'satisfactionScore',
              'fechaNacimiento' // ‚úÖ PRESERVAR fechaNacimiento incluso si es null
            ].contains(key)));

    // ‚úÖ LOG COMPLETO PARA DEBUG INCLUYENDO FECHA
    debugPrint('üì§ Preparando datos para Firestore:');
    debugPrint('   - Nombre completo: ${formData.personalInfo.fullName}');
    debugPrint(
        '   - Fecha de nacimiento: ${formData.personalInfo.fechaNacimiento}');
    if (formData.personalInfo.fechaNacimiento != null) {
      debugPrint(
          '   - Edad calculada: ${_calculateAge(formData.personalInfo.fechaNacimiento!)} a√±os');
      debugPrint(
          '   - Mes/D√≠a: ${formData.personalInfo.fechaNacimiento!.month}/${formData.personalInfo.fechaNacimiento!.day}');
    }
    debugPrint(
        '   - Modo de servicio: ${formData.serviceMode.name} (${formData.serviceMode.label})');
    debugPrint('   - Es servicio a domicilio: ${formData.isHomeService}');
    debugPrint('   - Es servicio en sucursal: ${formData.isInSiteService}');
    debugPrint('   - Es servicio h√≠brido: ${formData.isHybridService}');
    debugPrint('   - Direcci√≥n: ${formData.addressInfo.fullAddress}');
    if (!formData.isEditing) {
      debugPrint(
          '   - M√©tricas inicializadas: appointmentsCount=0, totalRevenue=0.0');
    }

    return data;
  }

// ‚úÖ FIX CR√çTICO #3: AGREGAR HELPER PARA CALCULAR EDAD
  int _calculateAge(DateTime birthDate) {
    final today = DateTime.now();
    int age = today.year - birthDate.year;
    if (today.month < birthDate.month ||
        (today.month == birthDate.month && today.day < birthDate.day)) {
      age--;
    }
    return age;
  }

  List<Map<String, dynamic>> _prepareTagsData(TagsFormInfo tagsInfo) {
    final List<Map<String, dynamic>> tagsData = [];

    // Etiquetas base
    for (final tag in tagsInfo.baseTags) {
      tagsData.add({
        'label': tag,
        'type': 'base',
        'createdAt': Timestamp.now(),
      });
    }

    // Etiquetas personalizadas con colores
    final colors = [
      '#7c4dff',
      '#009688',
      '#795548',
      '#3f51b5',
      '#00bcd4',
      '#ff5722',
      '#cddc39',
      '#607d8b',
      '#e91e63',
      '#ffc107'
    ];

    for (int i = 0; i < tagsInfo.customTags.length; i++) {
      final tag = tagsInfo.customTags[i];
      final color = colors[i % colors.length];

      tagsData.add({
        'label': tag,
        'color': color,
        'type': 'custom',
        'createdAt': Timestamp.now(),
      });
    }

    return tagsData;
  }

  // ========================================================================
  // üîß M√âTODOS HELPER - ‚úÖ FIX QUIR√öRGICO: VALIDACI√ìN INTERNACIONAL REAL
  // ========================================================================

  void _checkCostLimits() {
    if (!_canPerformRead()) {
      throw CostLimitException();
    }
  }

  bool _canPerformRead() {
    try {
      final stats = _costMonitor.currentStats;
      return stats.dailyReadCount < CostControlConfig.dailyReadLimit;
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error verificando l√≠mites de costo: $e');
      return true; // Fail-safe: permitir operaci√≥n
    }
  }

  void _recordRead() {
    try {
      debugPrint('üìä Consulta registrada para control de costos');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error registrando consulta: $e');
    }
  }

  void _handleFirestoreError(dynamic error) {
    if (error.toString().contains('PERMISSION_DENIED')) {
      throw const ClientFormException(
          'Sin permisos para realizar esta operaci√≥n', 'PERMISSION_DENIED');
    } else if (error.toString().contains('UNAVAILABLE')) {
      throw const ClientFormException(
          'Servicio temporalmente no disponible', 'SERVICE_UNAVAILABLE');
    } else if (error.toString().contains('DEADLINE_EXCEEDED')) {
      throw const ClientFormException('Tiempo de espera agotado', 'TIMEOUT');
    }
  }

  Future<void> _logClientOperation(
      String operation, String clientId, String clientName) async {
    try {
      await _firestore.collection('audit_logs').add({
        'operation': operation,
        'resource': 'client',
        'resourceId': clientId,
        'resourceName': clientName,
        'timestamp': FieldValue.serverTimestamp(),
        'source': 'client_form_service',
        'userId': 'current_user',
      });
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error registrando log de auditor√≠a: $e');
    }
  }

  bool _isValidEmail(String email) {
    return RegExp(r'^[^@]+@[^@]+\.[^@]+$').hasMatch(email.trim());
  }

  /// ‚úÖ FIX QUIR√öRGICO: Validaci√≥n internacional REAL (mismo que wizard_controller)
  bool _isValidInternationalPhoneFixed(String phone) {
    final cleaned = phone.replaceAll(RegExp(r'[^\d+]'), '');

    debugPrint('üîß SERVICE: VALIDANDO TEL√âFONO: "$phone" ‚Üí LIMPIO: "$cleaned"');

    // Validaciones b√°sicas
    if (cleaned.isEmpty) return false;
    if (cleaned.length < 7) return false;
    if (cleaned.length > 20) return false;

    // 1. INTERNACIONAL CON +: +52, +1, +34, etc.
    if (cleaned.startsWith('+')) {
      final isValid = cleaned.length >= 10 && cleaned.length <= 16;
      debugPrint(
          'üìû SERVICE: Internacional con +: ${isValid ? "‚úÖ V√ÅLIDO" : "‚ùå INV√ÅLIDO"}');
      return isValid;
    }

    // 2. MEXICANO TRADICIONAL: 10 d√≠gitos exactos
    if (cleaned.length == 10) {
      debugPrint('üìû SERVICE: Mexicano tradicional: ‚úÖ V√ÅLIDO');
      return true;
    }

    // 3. INTERNACIONAL SIN +: Entre 7-15 d√≠gitos
    if (cleaned.length >= 7 && cleaned.length <= 15) {
      debugPrint('üìû SERVICE: Internacional sin +: ‚úÖ V√ÅLIDO');
      return true;
    }

    debugPrint('‚ùå SERVICE: Formato no reconocido');
    return false;
  }

  bool _isValidCP(String cp) {
    final cleaned = cp.replaceAll(RegExp(r'[^\d]'), '');
    return cleaned.length == 5;
  }

  /// ‚úÖ FIX QUIR√öRGICO: Formatear tel√©fono internacional REAL
  String _formatInternationalPhoneFixed(String phone) {
    final cleaned = phone.replaceAll(RegExp(r'[^\d+]'), '');

    // Si es internacional (empieza con +), mantener formato
    if (cleaned.startsWith('+')) {
      return cleaned;
    }

    // Si es n√∫mero mexicano de 10 d√≠gitos, mantener sin +
    if (cleaned.length == 10) {
      return cleaned;
    }

    // Para otros casos, devolver limpio
    return cleaned;
  }

  String _formatCP(String cp) {
    return cp.replaceAll(RegExp(r'[^\d]'), '');
  }

  // ========================================================================
  // üîß M√âTODOS DE UTILIDAD PARA DESARROLLO
  // ========================================================================

  /// üìä OBTENER ESTAD√çSTICAS DE USO
  Future<Map<String, dynamic>> getUsageStats() async {
    try {
      final stats = _costMonitor.currentStats;
      return {
        'dailyReadCount': stats.dailyReadCount,
        'weeklyReadCount': stats.weeklyReadCount,
        'estimatedDailyCost': stats.estimatedDailyCost,
        'estimatedWeeklyCost': stats.estimatedWeeklyCost,
        'currentMode': stats.currentMode,
        'service_initialized': true,
        'firestore_connected': true,
      };
    } catch (e) {
      return {
        'error': e.toString(),
        'service_initialized': false,
        'firestore_connected': false,
      };
    }
  }

  /// üß™ M√âTODO PARA TESTING - LIMPIAR DATOS DE PRUEBA
  @visibleForTesting
  Future<void> cleanupTestData(String testPrefix) async {
    if (!kDebugMode) {
      throw const ClientFormException(
          'Cleanup solo disponible en modo debug', 'DEBUG_ONLY');
    }

    try {
      final query = await _firestore
          .collection(_collectionName)
          .where('nombre', isGreaterThanOrEqualTo: testPrefix)
          .where('nombre', isLessThan: '${testPrefix}z')
          .get();

      final batch = _firestore.batch();
      for (final doc in query.docs) {
        batch.delete(doc.reference);
      }

      await batch.commit();
      debugPrint(
          'üßπ Datos de prueba limpiados: ${query.docs.length} documentos');
    } catch (e) {
      debugPrint('‚ùå Error limpiando datos de prueba: $e');
      rethrow;
    }
  }

  /// üìà HEALTH CHECK DEL SERVICIO
  Future<bool> healthCheck() async {
    try {
      await _firestore
          .collection('_health_check')
          .doc('test')
          .set({'timestamp': FieldValue.serverTimestamp()}).timeout(
              const Duration(seconds: 5));

      final stats = _costMonitor.currentStats;
      return stats.dailyReadCount >= 0;
    } catch (e) {
      debugPrint('‚ùå Health check fall√≥: $e');
      return false;
    }
  }
}
