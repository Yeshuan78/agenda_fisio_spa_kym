// [booking_configuration_service.dart] - SERVICIO DE CONFIGURACI√ìN DE BOOKING
// üìÅ Ubicaci√≥n: /lib/services/booking/booking_configuration_service.dart  
// üéØ OBJETIVO: Centralizar l√≥gica de configuraci√≥n, detecci√≥n de tipos y temas

import 'package:flutter/material.dart';
import '../../theme/theme.dart';
import '../../enums/booking_types.dart';

/// üéØ SERVICIO DE CONFIGURACI√ìN DE BOOKING
/// Centraliza toda la l√≥gica de configuraci√≥n seg√∫n el tipo de booking
class BookingConfigurationService {
  
  /// üîç DETECTAR TIPO DE BOOKING
  /// Extra√≠do de: public_booking_screen.dart l√≠nea ~167
  static BookingType detectBookingType({
    String? companyId,
    Map<String, String>? queryParams,
    bool isParticular = false,
  }) {
    final params = queryParams ?? {};
    final eventId = params['e'] ?? params['eventId'];

    if (companyId != null && eventId != null) {
      return BookingType.enterprise;
    } else if (eventId != null) {
      return BookingType.corporate;
    } else if (isParticular) {
      return BookingType.particular;
    } else {
      return BookingType.particular;
    }
  }

  /// üé® OBTENER CONFIGURACI√ìN DE TEMA
  /// Extra√≠do de: public_booking_screen.dart l√≠nea ~180-220
  static Map<String, dynamic> getThemeConfig(
    BookingType bookingType, {
    Map<String, dynamic>? selectedEventData,
    Map<String, dynamic>? companyData,
  }) {
    switch (bookingType) {
      case BookingType.particular:
        return {
          'title': 'Agenda tu Cita Personal',
          'subtitle': 'Servicios de relajaci√≥n y bienestar',
          'gradient': kHeaderGradient,
          'accentColor': kBrandPurple,
          'icon': Icons.spa,
          'showPricing': true,
          'requiresAddress': true,
        };

      case BookingType.corporate:
        return {
          'title': 'Evento Corporativo',
          'subtitle': selectedEventData?['nombre'] ?? 'Servicios wellness empresarial',
          'gradient': const LinearGradient(colors: [kAccentBlue, kAccentGreen]),
          'accentColor': kAccentBlue,
          'icon': Icons.business_center,
          'showPricing': true,
          'requiresAddress': false,
        };

      case BookingType.enterprise:
        return {
          'title': 'Beneficio Empresarial',
          'subtitle': '${companyData?['nombre'] ?? 'Tu empresa'} - ${selectedEventData?['nombre'] ?? 'Servicio wellness'}',
          'gradient': const LinearGradient(colors: [kAccentGreen, kAccentBlue]),
          'accentColor': kAccentGreen,
          'icon': Icons.business,
          'showPricing': false,
          'requiresAddress': false,
        };
    }
  }

  /// üí∞ CALCULAR PRECIO SEG√öN TIPO DE BOOKING
  /// Extra√≠do de: public_booking_screen.dart l√≠nea ~400
  static int getPriceForBookingType(int basePrice, BookingType bookingType) {
    switch (bookingType) {
      case BookingType.enterprise:
        return 0; // Gratis para empresas
      case BookingType.corporate:
        return (basePrice * 0.7).round(); // 30% descuento
      case BookingType.particular:
        return basePrice; // Precio completo
    }
  }

  /// üéØ DETERMINAR SI MOSTRAR STEP DE TIPO DE CLIENTE
  static bool shouldShowClientTypeStep(BookingType bookingType) {
    return bookingType != BookingType.enterprise;
  }

  /// üî¢ CALCULAR N√öMERO TOTAL DE STEPS
  static int getTotalSteps(BookingType bookingType) {
    return shouldShowClientTypeStep(bookingType) ? 4 : 3;
  }

  /// üìã OBTENER CAMPOS REQUERIDOS SEG√öN TIPO
  static List<String> getRequiredFields(BookingType bookingType, bool isExistingClient) {
    if (isExistingClient) {
      // Cliente existente
      switch (bookingType) {
        case BookingType.enterprise:
          return ['empleado'];
        case BookingType.corporate:
        case BookingType.particular:
          return ['telefono'];
      }
    } else {
      // Cliente nuevo
      switch (bookingType) {
        case BookingType.enterprise:
          return ['nombre', 'telefono', 'empleado'];
        case BookingType.corporate:
          return ['nombre', 'telefono', 'email'];
        case BookingType.particular:
          return ['nombre', 'telefono', 'email'];
      }
    }
  }

  /// üè∑Ô∏è OBTENER LABELS SEG√öN TIPO
  static Map<String, String> getFieldLabels(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.enterprise:
        return {
          'nombre': 'Nombre (sin apellidos)',
          'telefono': 'Tel√©fono',
          'empleado': 'N√∫mero de empleado',
        };
      case BookingType.corporate:
      case BookingType.particular:
        return {
          'nombre': 'Nombre completo',
          'telefono': 'Tel√©fono',
          'email': 'Email',
          'direccion': 'Direcci√≥n (para servicios a domicilio)',
        };
    }
  }

  /// üîß OBTENER PLACEHOLDERS SEG√öN TIPO
  static Map<String, String> getFieldPlaceholders(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.enterprise:
        return {
          'nombre': 'Mar√≠a',
          'telefono': '55 1234 5678',
          'empleado': '12345',
        };
      case BookingType.corporate:
      case BookingType.particular:
        return {
          'nombre': 'Mar√≠a Gonz√°lez',
          'telefono': '55 1234 5678',
          'email': 'maria@email.com',
          'direccion': 'Calle, n√∫mero, colonia, c√≥digo postal',
        };
    }
  }

  /// üìù OBTENER MENSAJE DE BIENVENIDA SEG√öN TIPO
  static String getWelcomeMessage(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.enterprise:
        return 'Accede a tu beneficio empresarial de wellness';
      case BookingType.corporate:
        return 'Reserva tu servicio en el evento corporativo';
      case BookingType.particular:
        return 'Agenda tu cita personal de relajaci√≥n';
    }
  }

  /// üéâ OBTENER MENSAJE DE CONFIRMACI√ìN SEG√öN TIPO
  static String getConfirmationMessage(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.enterprise:
        return 'Tu beneficio empresarial ha sido reservado exitosamente';
      case BookingType.corporate:
        return 'Tu participaci√≥n en el evento ha sido confirmada';
      case BookingType.particular:
        return 'Tu cita personal ha sido agendada exitosamente';
    }
  }

  /// üìû OBTENER INSTRUCCIONES DE CONTACTO SEG√öN TIPO
  static List<String> getContactInstructions(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.enterprise:
        return [
          'Te contactaremos v√≠a WhatsApp para confirmar tu servicio.',
          'La coordinaci√≥n ser√° directa con el √°rea de Recursos Humanos.',
        ];
      case BookingType.corporate:
        return [
          'Te contactaremos v√≠a WhatsApp para confirmar tu participaci√≥n.',
          'Tambi√©n recibir√°s informaci√≥n adicional del evento.',
        ];
      case BookingType.particular:
        return [
          'Te contactaremos v√≠a WhatsApp para confirmar tu cita.',
          'Tambi√©n recibir√°s el enlace de pago una vez confirmada.',
        ];
    }
  }

  /// üîç VALIDAR CONFIGURACI√ìN DE BOOKING
  static bool validateBookingConfiguration({
    required BookingType bookingType,
    String? companyId,
    String? eventId,
  }) {
    switch (bookingType) {
      case BookingType.enterprise:
        return companyId != null && eventId != null;
      case BookingType.corporate:
        return eventId != null;
      case BookingType.particular:
        return true; // Siempre v√°lido
    }
  }

  /// üé® OBTENER COLORES DIN√ÅMICOS SEG√öN TIPO
  static Color getAccentColor(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.particular:
        return kBrandPurple;
      case BookingType.corporate:
        return kAccentBlue;
      case BookingType.enterprise:
        return kAccentGreen;
    }
  }

  /// üé≠ OBTENER GRADIENTE SEG√öN TIPO
  static LinearGradient getGradient(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.particular:
        return kHeaderGradient;
      case BookingType.corporate:
        return const LinearGradient(colors: [kAccentBlue, kAccentGreen]);
      case BookingType.enterprise:
        return const LinearGradient(colors: [kAccentGreen, kAccentBlue]);
    }
  }

  /// üè¢ OBTENER ICONO SEG√öN TIPO
  static IconData getIcon(BookingType bookingType) {
    switch (bookingType) {
      case BookingType.particular:
        return Icons.spa;
      case BookingType.corporate:
        return Icons.business_center;
      case BookingType.enterprise:
        return Icons.business;
    }
  }

  /// üìä OBTENER CONFIGURACI√ìN COMPLETA COMO OBJETO
  static BookingConfiguration getConfiguration(
    BookingType bookingType, {
    Map<String, dynamic>? selectedEventData,
    Map<String, dynamic>? companyData,
  }) {
    final config = getThemeConfig(
      bookingType,
      selectedEventData: selectedEventData,
      companyData: companyData,
    );

    return BookingConfiguration(
      type: bookingType,
      title: config['title'],
      subtitle: config['subtitle'],
      icon: config['icon'],
      gradient: config['gradient'],
      accentColor: config['accentColor'],
      showPricing: config['showPricing'],
      requiresAddress: config['requiresAddress'],
      showClientTypeStep: shouldShowClientTypeStep(bookingType),
      totalSteps: getTotalSteps(bookingType),
      welcomeMessage: getWelcomeMessage(bookingType),
      confirmationMessage: getConfirmationMessage(bookingType),
      contactInstructions: getContactInstructions(bookingType),
      requiredFields: {},
      fieldLabels: getFieldLabels(bookingType),
      fieldPlaceholders: getFieldPlaceholders(bookingType),
    );
  }
}

/// üìã MODELO DE CONFIGURACI√ìN DE BOOKING
class BookingConfiguration {
  final BookingType type;
  final String title;
  final String subtitle;
  final IconData icon;
  final LinearGradient gradient;
  final Color accentColor;
  final bool showPricing;
  final bool requiresAddress;
  final bool showClientTypeStep;
  final int totalSteps;
  final String welcomeMessage;
  final String confirmationMessage;
  final List<String> contactInstructions;
  final Map<String, List<String>> requiredFields;
  final Map<String, String> fieldLabels;
  final Map<String, String> fieldPlaceholders;

  const BookingConfiguration({
    required this.type,
    required this.title,
    required this.subtitle,
    required this.icon,
    required this.gradient,
    required this.accentColor,
    required this.showPricing,
    required this.requiresAddress,
    required this.showClientTypeStep,
    required this.totalSteps,
    required this.welcomeMessage,
    required this.confirmationMessage,
    required this.contactInstructions,
    required this.requiredFields,
    required this.fieldLabels,
    required this.fieldPlaceholders,
  });

  /// üîÑ COPIAR CON MODIFICACIONES
  BookingConfiguration copyWith({
    BookingType? type,
    String? title,
    String? subtitle,
    IconData? icon,
    LinearGradient? gradient,
    Color? accentColor,
    bool? showPricing,
    bool? requiresAddress,
    bool? showClientTypeStep,
    int? totalSteps,
    String? welcomeMessage,
    String? confirmationMessage,
    List<String>? contactInstructions,
    Map<String, List<String>>? requiredFields,
    Map<String, String>? fieldLabels,
    Map<String, String>? fieldPlaceholders,
  }) {
    return BookingConfiguration(
      type: type ?? this.type,
      title: title ?? this.title,
      subtitle: subtitle ?? this.subtitle,
      icon: icon ?? this.icon,
      gradient: gradient ?? this.gradient,
      accentColor: accentColor ?? this.accentColor,
      showPricing: showPricing ?? this.showPricing,
      requiresAddress: requiresAddress ?? this.requiresAddress,
      showClientTypeStep: showClientTypeStep ?? this.showClientTypeStep,
      totalSteps: totalSteps ?? this.totalSteps,
      welcomeMessage: welcomeMessage ?? this.welcomeMessage,
      confirmationMessage: confirmationMessage ?? this.confirmationMessage,
      contactInstructions: contactInstructions ?? this.contactInstructions,
      requiredFields: requiredFields ?? this.requiredFields,
      fieldLabels: fieldLabels ?? this.fieldLabels,
      fieldPlaceholders: fieldPlaceholders ?? this.fieldPlaceholders,
    );
  }

  /// üìã CONVERSI√ìN A MAP
  Map<String, dynamic> toMap() {
    return {
      'type': type.name,
      'title': title,
      'subtitle': subtitle,
      'showPricing': showPricing,
      'requiresAddress': requiresAddress,
      'showClientTypeStep': showClientTypeStep,
      'totalSteps': totalSteps,
      'welcomeMessage': welcomeMessage,
      'confirmationMessage': confirmationMessage,
      'contactInstructions': contactInstructions,
      'requiredFields': requiredFields,
      'fieldLabels': fieldLabels,
      'fieldPlaceholders': fieldPlaceholders,
    };
  }

  @override
  String toString() {
    return 'BookingConfiguration{type: ${type.name}, title: $title, totalSteps: $totalSteps}';
  }
}